# PIPELINE DEFINITION
# Name: train-nn-model
# Inputs:
#    train_nn: system.Dataset
# Outputs:
#    model_nn: system.Model
components:
  comp-train-nn-model:
    executorLabel: exec-train-nn-model
    inputDefinitions:
      artifacts:
        train_nn:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model_nn:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-train-nn-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_nn_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'fsspec'\
          \ 'gcsfs' 'scikit-learn' 'tensorflow' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_nn_model(\n    train_nn : Input[Dataset],\n    model_nn\
          \ : Output[Model]\n\n)->None:\n\n  import pandas as pd \n  import tensorflow\
          \ as tf \n  from sklearn.model_selection import train_test_split\n  from\
          \ tensorflow.keras.models import Sequential\n  from tensorflow.keras.layers\
          \ import Dense\n  from tensorflow.keras.callbacks import EarlyStopping \n\
          \n  import os\n\n  train_df = pd.read_csv(train_nn.path + '.csv')\n  X_train\
          \ = train_df.drop('y', axis=1)\n  y_train = train_df['y']\n\n\n  input_dim\
          \ = X_train.shape[1] \n\n  model = Sequential([\n      Dense(16, activation='relu',\
          \ input_dim=input_dim),\n      Dense(8, activation='relu'),\n      Dense(1,\
          \ activation='sigmoid')\n\n  ])\n\n  model.compile(optimizer='adam', loss='binary_crossentropy',\n\
          \                metrics=['accuracy', tf.keras.metrics.AUC(name='auc')])\n\
          \n\n  callback = EarlyStopping(\n      monitor = 'val_loss',\n      patience\
          \ = 2\n  )\n\n  history = model.fit(\n      X_train, y_train,\n      validation_split\
          \ = 0.2,\n      epochs=20,\n      batch_size = 8,\n      verbose=1,\n  \
          \    callbacks = [callback]\n  )\n\n  os.makedirs(model_nn.path, exist_ok=True)\n\
          \  model.export(model_nn.path)\n\n  # model.save(model_nn.path)\n\n\n\n\
          \  print('NN saved succesfuly')\n\n"
        image: python:3.10
pipelineInfo:
  name: train-nn-model
root:
  dag:
    outputs:
      artifacts:
        model_nn:
          artifactSelectors:
          - outputArtifactKey: model_nn
            producerSubtask: train-nn-model
    tasks:
      train-nn-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-nn-model
        inputs:
          artifacts:
            train_nn:
              componentInputArtifact: train_nn
        taskInfo:
          name: train-nn-model
  inputDefinitions:
    artifacts:
      train_nn:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
  outputDefinitions:
    artifacts:
      model_nn:
        artifactType:
          schemaTitle: system.Model
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.10.0
