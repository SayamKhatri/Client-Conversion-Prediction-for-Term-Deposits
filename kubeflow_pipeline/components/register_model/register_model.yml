# PIPELINE DEFINITION
# Name: register-model
# Inputs:
#    best_model_framework: system.Artifact
#    best_model_path: system.Artifact
#    model_display_name: str [Default: 'bank-model']
#    project_id: str
#    region: str
#    should_deploy: system.Artifact
# Outputs:
#    registered_model: system.Artifact
components:
  comp-register-model:
    executorLabel: exec-register-model
    inputDefinitions:
      artifacts:
        best_model_framework:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        best_model_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        should_deploy:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        model_display_name:
          defaultValue: bank-model
          isOptional: true
          parameterType: STRING
        project_id:
          parameterType: STRING
        region:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        registered_model:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-register-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - register_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-aiplatform'\
          \ 'fsspec' 'gcsfs' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef register_model(\n    should_deploy: Input[Artifact],\n    best_model_path:\
          \ Input[Artifact],\n    best_model_framework: Input[Artifact],\n    project_id:\
          \ str,\n    region: str,\n    registered_model: Output[Artifact],\n    model_display_name:\
          \ str = \"bank-model\"\n\n\n):\n  import os \n  from google.cloud import\
          \ aiplatform\n\n\n  with open(os.path.join(should_deploy.path, 'deploy.txt'),\
          \ 'r') as f:\n    deploy_flag = f.read().strip()\n\n\n\n  if deploy_flag.lower()\
          \ != \"true\":\n      print(\"Deployment skipped: Model did not meet thresholds.\"\
          )\n      return\n\n  with open(os.path.join(best_model_path.path, \"path.txt\"\
          ), \"r\") as f:\n      model_dir = f.read().strip()\n\n  with open(os.path.join(best_model_framework.path,\
          \ \"framework.txt\"), \"r\") as f:\n      framework = f.read().strip()\n\
          \n  print(f\"Registering model from path: {model_dir}\")\n  print(f\"Framework:\
          \ {framework}\")\n\n\n\n  aiplatform.init(project=project_id, location=region)\n\
          \n  model = aiplatform.Model.upload(\n      display_name = model_display_name,\n\
          \      artifact_uri = model_dir,\n\n      serving_container_image_uri=(\n\
          \          \"us-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.1-0:latest\"\
          \n          if framework == \"sklearn\" else\n          \"us-docker.pkg.dev/vertex-ai/prediction/tf-cpu.2-11:latest\"\
          \n      )\n    )                                \n\n\n  model.wait()\n\n\
          \n  os.makedirs(registered_model.path, exist_ok=True)\n  with open(os.path.join(registered_model.path,\
          \ 'model_uri.txt'), 'w') as f:\n      f.write(model.resource_name)\n\n \
          \ print(f\"Model registered: {model.resource_name}\")\n\n"
        image: python:3.10
pipelineInfo:
  name: register-model
root:
  dag:
    outputs:
      artifacts:
        registered_model:
          artifactSelectors:
          - outputArtifactKey: registered_model
            producerSubtask: register-model
    tasks:
      register-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-register-model
        inputs:
          artifacts:
            best_model_framework:
              componentInputArtifact: best_model_framework
            best_model_path:
              componentInputArtifact: best_model_path
            should_deploy:
              componentInputArtifact: should_deploy
          parameters:
            model_display_name:
              componentInputParameter: model_display_name
            project_id:
              componentInputParameter: project_id
            region:
              componentInputParameter: region
        taskInfo:
          name: register-model
  inputDefinitions:
    artifacts:
      best_model_framework:
        artifactType:
          schemaTitle: system.Artifact
          schemaVersion: 0.0.1
      best_model_path:
        artifactType:
          schemaTitle: system.Artifact
          schemaVersion: 0.0.1
      should_deploy:
        artifactType:
          schemaTitle: system.Artifact
          schemaVersion: 0.0.1
    parameters:
      model_display_name:
        defaultValue: bank-model
        isOptional: true
        parameterType: STRING
      project_id:
        parameterType: STRING
      region:
        parameterType: STRING
  outputDefinitions:
    artifacts:
      registered_model:
        artifactType:
          schemaTitle: system.Artifact
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.10.0
