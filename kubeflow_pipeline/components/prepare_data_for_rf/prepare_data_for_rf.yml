# PIPELINE DEFINITION
# Name: prepare-data-for-rf
# Inputs:
#    raw_dataset: system.Dataset
# Outputs:
#    label_encoder_obj: system.Artifact
#    test_rf: system.Dataset
#    train_rf: system.Dataset
components:
  comp-prepare-data-for-rf:
    executorLabel: exec-prepare-data-for-rf
    inputDefinitions:
      artifacts:
        raw_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        label_encoder_obj:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        test_rf:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_rf:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-prepare-data-for-rf:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - prepare_data_for_rf
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'fsspec'\
          \ 'gcsfs' 'scikit-learn' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef prepare_data_for_rf(\n    raw_dataset : Input[Dataset],\n   \
          \ train_rf : Output[Dataset],\n    test_rf : Output[Dataset],\n    label_encoder_obj\
          \ : Output[Artifact]\n\n)-> None:\n\n  import pandas as pd\n  from sklearn.preprocessing\
          \ import LabelEncoder \n  from sklearn.model_selection import train_test_split\n\
          \  import pickle\n\n  df = pd.read_csv(raw_dataset.path + '.csv')\n\n  if\
          \ 'duration' in df.columns:\n    df.drop(columns=['duration'], inplace=True)\n\
          \n\n  categorical_cols = ['job', 'marital', 'education', 'default', 'housing',\
          \ 'loan', 'contact', 'month', 'poutcome']\n\n  label_encoders = {}\n  for\
          \ col in categorical_cols:\n    le = LabelEncoder()\n    df[col] = le.fit_transform(df[col])\n\
          \    label_encoders[col] = le \n\n\n  train_df, test_df = train_test_split(df,\
          \ test_size=0.2, random_state=42)\n\n  train_df.to_csv(train_rf.path + '.csv',\
          \ index=False)\n  test_df.to_csv(test_rf.path + '.csv', index=False)\n\n\
          \  with open(label_encoder_obj.path + '.pkl', 'wb') as f:\n    pickle.dump(label_encoders,\
          \ f)\n\n\n  print('Random Forest Data is Ready')\n  print('Label Encoder\
          \ artifact saved at:', label_encoder_obj.path + '.pkl')\n\n"
        image: python:3.10
pipelineInfo:
  name: prepare-data-for-rf
root:
  dag:
    outputs:
      artifacts:
        label_encoder_obj:
          artifactSelectors:
          - outputArtifactKey: label_encoder_obj
            producerSubtask: prepare-data-for-rf
        test_rf:
          artifactSelectors:
          - outputArtifactKey: test_rf
            producerSubtask: prepare-data-for-rf
        train_rf:
          artifactSelectors:
          - outputArtifactKey: train_rf
            producerSubtask: prepare-data-for-rf
    tasks:
      prepare-data-for-rf:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-prepare-data-for-rf
        inputs:
          artifacts:
            raw_dataset:
              componentInputArtifact: raw_dataset
        taskInfo:
          name: prepare-data-for-rf
  inputDefinitions:
    artifacts:
      raw_dataset:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
  outputDefinitions:
    artifacts:
      label_encoder_obj:
        artifactType:
          schemaTitle: system.Artifact
          schemaVersion: 0.0.1
      test_rf:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
      train_rf:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.10.0
